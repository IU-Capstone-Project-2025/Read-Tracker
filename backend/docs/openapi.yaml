openapi: 3.1.0

info:
  title: Book API
  description: API for managing books, users, collections, and more.
  version: 2.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., validation error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /auth/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  user_id:
                    type: integer
        '401':
          description: Unauthorized (e.g., invalid credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /auth/profile:
    post:
      summary: Get user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      username:
                        type: string
                      email:
                        type: string
                        format: email
                      avatar:
                        type: string
                      created_at:
                        type: datetime
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: No user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /auth/profile/avatar:
    put:
      summary: Update user avatar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                avatar:
                  type: string
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., invalid file)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: No user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  auth/profile/password:
    put:
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., validation error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Not Found (e.g., no user found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  books:
    get:
      summary: Get a list of books
      responses:
        '200':
          description: Books retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        author:
                          type: string
                        title:
                          type: string
                        language:
                          type: string
                        description:
                          type: string
                        cover:
                          type: string
                          format: uri
                        tags:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              name:
                                type: string
                              description:
                                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /books/{book_id}:
    get:
      summary: Get a single book by ID
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      author:
                        type: string
                      language:
                        type: string
                      cover:
                        type: string
                        format: uri
                      tags:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                            description:
                              type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/check_in:
    post:
      summary: Update streak
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Checked in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/streaks:
    post:
      summary: Get streaks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Streaks retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      user_id:
                        type: string
                        format: uuid
                      start_date:
                        type: datetime
                      end_date:
                        type: datetime
                      last_marked:
                        type: datetime
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/reviews:
    post:
      summary: Get all reviews from user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        rate:
                          type: string
                        text:
                          type: string
                        book_id:
                          type: string
                          format: uuid
                        user_id:
                          type: string
                          format: uuid
                        created_at:
                          type: string
                          format: date
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/reviews/{book_id}:
    post:
      summary: Get user review by book_id
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      rate:
                        type: string
                      text:
                        type: string
                      book_id:
                        type: string
                        format: uuid
                      user_id:
                        type: string
                        format: uuid
                      created_at:
                        type: string
                        format: date
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    put:
      summary: Update review
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                rate:
                  type: int optional
                text:
                  type: string optional
      responses:
        '200':
          description: Review created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      rate:
                        type: string
                      text:
                        type: string
                      book_id:
                        type: string
                        format: uuid
                      user_id:
                        type: string
                        format: uuid
                      created_at:
                        type: string
                        format: date
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Delete review
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/reviews/{book_id}/new:
    post:
      summary: Add review
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                rate:
                  type: string
                text:
                  type: boolean
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/reviews/{book_id}/all_reviews:
    get:
      summary: Get all reviews written to book with book_id
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      rate:
                        type: string
                      text:
                        type: string
                      book_id:
                        type: string
                        format: uuid
                      user_id:
                        type: string
                        format: uuid
                      created_at:
                        type: string
                        format: date
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/collections/all:
    post:
      summary: Get all collections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A list of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      schema:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                          title:
                            type: string
                          description:
                            type: string
                          is_private:
                            type: boolean
                          cover:
                            type: string
        '400':
          description: Database returned error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/collections:
    post:
      summary: Create a new collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                title:
                  type: string
                description:
                  type: string
                is_private:
                  type: boolean
                cover:
                  type: string
      responses:
        '200':
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Failed to create collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/collections/{collection_id}:
    get:
      summary: Get a single collection by ID
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      description:
                        type: string
                      cover:
                        type: string
                        format: uri
                      user_id:
                        type: string
                        format: uuid
                      is_private:
                        type: boolean
                      created_at:
                        type: string
                        format: date
                      tags:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                            description:
                              type: string
        '400':
          description: Database returned error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    put:
      summary: Update a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                is_private:
                  type: boolean
                cover:
                  type: string
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  is_private:
                    type: boolean
                  cover:
                    type: string
                    format: uri
        '400':
          description: Database returned error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Delete a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Collection deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '500':
          description: Failed to delete collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/collections/{collection_id}/{book_id}:
    post:
      summary: Add a book to a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book added to the collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Failed to add book to collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Remove a book from a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book deleted from the collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Failed to delete book to the collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/books:
    post:
      summary: Get user books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A list of user books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        book_id:
                          type: string
                          format: uuid
                        start_date:
                          type: datetime
                        end_date:
                          type: datetime
                        status:
                          type: ['want to read', 'reading now', 'have read']
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/books/{book_id}/new:
    post:
      summary: Add user book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                status:
                  type: ['want to read', 'reading now', 'have read']
      responses:
        '200':
          description: User book added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/books/{book_id}:
    post:
      summary: Get user book by book_id
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A list of user books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        book_id:
                          type: string
                          format: uuid
                        start_date:
                          type: datetime
                        end_date:
                          type: datetime
                        status:
                          type: ['want to read', 'reading now', 'have read']
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: User book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    put:
      summary: Update user book by book_id
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                status:
                  type: ['want to read', 'reading now', 'have read']
      responses:
        '200':
          description: User book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Delete user book by book_id
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: User book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/books/{book_id}/notes:
    post:
      summary: Get all notes from a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        text:
                          type: string
                        book_id:
                          type: string
                        user_id:
                          type: string
                        created_at:
                          type: datetime
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    put:
      summary: Add Note
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                text:
                  type: string
      responses:
        '200':
          description: Note updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid note
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /me/notes/{note_id}:
    get:
      summary: Get note by its id
      parameters:
        - name: note_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A note data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          id: string
                        text:
                          type: string
                        book_id:
                          type: string
                        user_id:
                          type: string
                        created_at:
                          type: date
        '404':
          description: Note id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    put:
      summary: Update note by its id
      parameters:
        - name: note_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Note id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid note
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '500':
          description: Failed to update note
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
    delete:
      summary: Delete note by its id
      parameters:
        - name: note_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Note deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
          '404':
            description: Note id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
          '500':
            description: Failed to delete note
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string

  /subscriptions:
    post:
      summary: Subscribe to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                publisher_id:
                  type: string
                  format: uuid
                subscriber_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Subscribed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
          '404':
            description: User id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
          '400':
            description: Database returned error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
    delete:
      summary: Unsubscribe
      parameters:
        - name: subscription_id
          in: path
          required: true
          schema:
            int: string
            format: uuid
      responses:
        '200':
          description: Unsubscribed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
          '404':
            description: Subscription not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string
          '400':
            description: Database returned error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                    message:
                      type: string

  /subscriptions/{subscription_id}/reviews:
    get:
      summary: Retrieve reviews from subscription
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        rate:
                          type: string
                        text:
                          type: string
                        book_id:
                          type: string
                          format: uuid
                        user_id:
                          type: string
                          format: uuid
                        created_at:
                          type: string
                          format: date
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Database returned error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /subscriptions/all_reviews:
    get:
      summary: Get all reviews from all subscriptions of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriber_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: All reviews from subscriptions retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        rate:
                          type: string
                        text:
                          type: string
                        book_id:
                          type: string
                          format: uuid
                        user_id:
                          type: string
                          format: uuid
                        created_at:
                          type: string
                          format: date
        '400':
          description: Database returned error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string