openapi: 3.1.0

info:
  title: Book API
  description: API for managing books, users, collections, and more.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., validation error)

  /auth/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  token:
                    type: string
                  user_id:
                    type: integer
        '401':
          description: Unauthorized (e.g., invalid credentials)
        '404':
          description: Not Found (e.g., user not found)

  /auth/validate:
    post:
      summary: Validate an authentication token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Not Found (e.g., token not found or invalid)

  /auth/refresh:
    post:
      summary: Refresh an authentication token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  token:
                    type: string
        '404':
          description: Not Found (e.g., refresh token invalid)

  /auth/forgot_password:
    post:
      summary: Request a password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., validation error)
        '404':
          description: Not Found (e.g., email not registered)

  /auth/reset_password:
    post:
      summary: Reset a user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., invalid token or password)

  /auth/profile:
    get:
      summary: Get user profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      username:
                        type: string
                      email:
                        type: string
                        format: email
        '401':
          description: Unauthorized

  /auth/profile/avatar:
    put:
      summary: Update user avatar
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., invalid file)
        '401':
          description: Unauthorized

  /auth/profile/password:
    put:
      summary: Change user password
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., invalid old password)
        '401':
          description: Unauthorized

  /books/:
    get:
      summary: Get a list of books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        author:
                          type: string
                        title:
                          type: string
                        language:
                          type: string
                        description:
                          type: string
                        cover:
                          type: string
    post:
      summary: Add a new book
      responses:
        '200':
          description: Book added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      author:
                        type: string
                      language:
                        type: string
                      cover:
                        type: string
                        format: uri
                      status:
                        type: string
        '400':
          description: Bad Request (e.g., validation error)
        '404':
          description: Not Found

  /books/{book_id}:
    get:
      summary: Get a single book by ID
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      title:
                        type: string
                      author:
                        type: string
                      language:
                        type: string
                      cover:
                        type: string
                        format: uri
                      status:
                        type: string
        '404':
          description: Book not found
    put:
      summary: Update a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '400':
          description: Bad Request (e.g., validation error)
        '404':
          description: Book not found
    delete:
      summary: Delete a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        '404':
          description: Book not found

  /books/{book_id}/reviews:
    get:
      summary: Get reviews for a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items: {}

  /books/{book_id}/notes:
    get:
      summary: Get notes for a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of notes
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items: {}
    post:
      summary: Add a note to a book
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Note added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items: {}

  /collections/:
    get:
      summary: Get all collections
      responses:
        '200':
          description: A list of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: array
                    items: {}
    post:
      summary: Create a new collection
      responses:
        '200':
          description: Collection created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /collections/{collection_id}:
    get:
      summary: Get a single collection by ID
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Collection details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      collection_id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      cover:
                        type: string
                        format: uri
                      user_id:
                        type: integer
                      username:
                        type: string
                      is_private:
                        type: boolean
                      created_at:
                        type: integer
    put:
      summary: Update a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Collection updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  is_private:
                    type: boolean
                  cover:
                    type: string
                    format: uri
    delete:
      summary: Delete a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Collection deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /collections/{collection_id}/books:
    post:
      summary: Add a book to a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book added to collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /collections/{collection_id}/books/{book_id}:
    delete:
      summary: Remove a book from a collection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Book removed from collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string

  /explore/collections:
    get:
      summary: Get collections with pagination
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A paginated list of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items: {}
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                          offset:
                            type: integer
                          total:
                            type: integer

  /explore/reviews:
    get:
      summary: Get reviews with pagination
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: A paginated list of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items: {}
                      pagination:
                        type: object
                        properties:
                          limit:
                            type: integer
                          offset:
                            type: integer
                          total:
                            type: integer
